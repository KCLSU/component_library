/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';


export namespace Components {
  interface AccordionContainer {}
  interface AccordionDropdown {
    'title': string;
  }
  interface CampaignAim {}
  interface CampaignAimContainer {
    'campaignname': string;
  }
  interface CampaignNews {
    'fetchNews': () => Promise<void>;
    'newsid': string;
  }
  interface CampaignPage {
    'campaignId': number;
    'name': string;
  }
  interface CampaignTabs {}
  interface ChildComponent {
    'number': number;
  }
  interface FlexContainer {
    'alignx': string;
    'aligny': string;
    'direction': string;
    'mobcolumn': boolean;
    'wrap': boolean;
  }
  interface FullwidthBeigeStrip {}
  interface FullwidthStrip {
    'color': string;
    'height': string;
  }
  interface GetInvolved {
    'typeform': string;
  }
  interface MyComponent {
    /**
    * The first name
    */
    'first': string;
    /**
    * The last name
    */
    'last': string;
    /**
    * The middle name
    */
    'middle': string;
  }
  interface PageContent {}
  interface ParentComponent {
    'number': number;
  }
  interface QuickLink {
    'to': string;
  }
  interface QuickLinks {
    'title': string;
  }
  interface SecondComponent {
    'animal': string;
  }
  interface ShowSupport {}
  interface SupportOption {
    'heading': string;
    'supportname': string;
  }
  interface TabMenu {
    'title': string;
  }
  interface TabsContainer {}
  interface VideoBanner {
    'url': string;
  }
}

declare global {


  interface HTMLAccordionContainerElement extends Components.AccordionContainer, HTMLStencilElement {}
  const HTMLAccordionContainerElement: {
    prototype: HTMLAccordionContainerElement;
    new (): HTMLAccordionContainerElement;
  };

  interface HTMLAccordionDropdownElement extends Components.AccordionDropdown, HTMLStencilElement {}
  const HTMLAccordionDropdownElement: {
    prototype: HTMLAccordionDropdownElement;
    new (): HTMLAccordionDropdownElement;
  };

  interface HTMLCampaignAimElement extends Components.CampaignAim, HTMLStencilElement {}
  const HTMLCampaignAimElement: {
    prototype: HTMLCampaignAimElement;
    new (): HTMLCampaignAimElement;
  };

  interface HTMLCampaignAimContainerElement extends Components.CampaignAimContainer, HTMLStencilElement {}
  const HTMLCampaignAimContainerElement: {
    prototype: HTMLCampaignAimContainerElement;
    new (): HTMLCampaignAimContainerElement;
  };

  interface HTMLCampaignNewsElement extends Components.CampaignNews, HTMLStencilElement {}
  const HTMLCampaignNewsElement: {
    prototype: HTMLCampaignNewsElement;
    new (): HTMLCampaignNewsElement;
  };

  interface HTMLCampaignPageElement extends Components.CampaignPage, HTMLStencilElement {}
  const HTMLCampaignPageElement: {
    prototype: HTMLCampaignPageElement;
    new (): HTMLCampaignPageElement;
  };

  interface HTMLCampaignTabsElement extends Components.CampaignTabs, HTMLStencilElement {}
  const HTMLCampaignTabsElement: {
    prototype: HTMLCampaignTabsElement;
    new (): HTMLCampaignTabsElement;
  };

  interface HTMLChildComponentElement extends Components.ChildComponent, HTMLStencilElement {}
  const HTMLChildComponentElement: {
    prototype: HTMLChildComponentElement;
    new (): HTMLChildComponentElement;
  };

  interface HTMLFlexContainerElement extends Components.FlexContainer, HTMLStencilElement {}
  const HTMLFlexContainerElement: {
    prototype: HTMLFlexContainerElement;
    new (): HTMLFlexContainerElement;
  };

  interface HTMLFullwidthBeigeStripElement extends Components.FullwidthBeigeStrip, HTMLStencilElement {}
  const HTMLFullwidthBeigeStripElement: {
    prototype: HTMLFullwidthBeigeStripElement;
    new (): HTMLFullwidthBeigeStripElement;
  };

  interface HTMLFullwidthStripElement extends Components.FullwidthStrip, HTMLStencilElement {}
  const HTMLFullwidthStripElement: {
    prototype: HTMLFullwidthStripElement;
    new (): HTMLFullwidthStripElement;
  };

  interface HTMLGetInvolvedElement extends Components.GetInvolved, HTMLStencilElement {}
  const HTMLGetInvolvedElement: {
    prototype: HTMLGetInvolvedElement;
    new (): HTMLGetInvolvedElement;
  };

  interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {}
  const HTMLMyComponentElement: {
    prototype: HTMLMyComponentElement;
    new (): HTMLMyComponentElement;
  };

  interface HTMLPageContentElement extends Components.PageContent, HTMLStencilElement {}
  const HTMLPageContentElement: {
    prototype: HTMLPageContentElement;
    new (): HTMLPageContentElement;
  };

  interface HTMLParentComponentElement extends Components.ParentComponent, HTMLStencilElement {}
  const HTMLParentComponentElement: {
    prototype: HTMLParentComponentElement;
    new (): HTMLParentComponentElement;
  };

  interface HTMLQuickLinkElement extends Components.QuickLink, HTMLStencilElement {}
  const HTMLQuickLinkElement: {
    prototype: HTMLQuickLinkElement;
    new (): HTMLQuickLinkElement;
  };

  interface HTMLQuickLinksElement extends Components.QuickLinks, HTMLStencilElement {}
  const HTMLQuickLinksElement: {
    prototype: HTMLQuickLinksElement;
    new (): HTMLQuickLinksElement;
  };

  interface HTMLSecondComponentElement extends Components.SecondComponent, HTMLStencilElement {}
  const HTMLSecondComponentElement: {
    prototype: HTMLSecondComponentElement;
    new (): HTMLSecondComponentElement;
  };

  interface HTMLShowSupportElement extends Components.ShowSupport, HTMLStencilElement {}
  const HTMLShowSupportElement: {
    prototype: HTMLShowSupportElement;
    new (): HTMLShowSupportElement;
  };

  interface HTMLSupportOptionElement extends Components.SupportOption, HTMLStencilElement {}
  const HTMLSupportOptionElement: {
    prototype: HTMLSupportOptionElement;
    new (): HTMLSupportOptionElement;
  };

  interface HTMLTabMenuElement extends Components.TabMenu, HTMLStencilElement {}
  const HTMLTabMenuElement: {
    prototype: HTMLTabMenuElement;
    new (): HTMLTabMenuElement;
  };

  interface HTMLTabsContainerElement extends Components.TabsContainer, HTMLStencilElement {}
  const HTMLTabsContainerElement: {
    prototype: HTMLTabsContainerElement;
    new (): HTMLTabsContainerElement;
  };

  interface HTMLVideoBannerElement extends Components.VideoBanner, HTMLStencilElement {}
  const HTMLVideoBannerElement: {
    prototype: HTMLVideoBannerElement;
    new (): HTMLVideoBannerElement;
  };
  interface HTMLElementTagNameMap {
    'accordion-container': HTMLAccordionContainerElement;
    'accordion-dropdown': HTMLAccordionDropdownElement;
    'campaign-aim': HTMLCampaignAimElement;
    'campaign-aim-container': HTMLCampaignAimContainerElement;
    'campaign-news': HTMLCampaignNewsElement;
    'campaign-page': HTMLCampaignPageElement;
    'campaign-tabs': HTMLCampaignTabsElement;
    'child-component': HTMLChildComponentElement;
    'flex-container': HTMLFlexContainerElement;
    'fullwidth-beige-strip': HTMLFullwidthBeigeStripElement;
    'fullwidth-strip': HTMLFullwidthStripElement;
    'get-involved': HTMLGetInvolvedElement;
    'my-component': HTMLMyComponentElement;
    'page-content': HTMLPageContentElement;
    'parent-component': HTMLParentComponentElement;
    'quick-link': HTMLQuickLinkElement;
    'quick-links': HTMLQuickLinksElement;
    'second-component': HTMLSecondComponentElement;
    'show-support': HTMLShowSupportElement;
    'support-option': HTMLSupportOptionElement;
    'tab-menu': HTMLTabMenuElement;
    'tabs-container': HTMLTabsContainerElement;
    'video-banner': HTMLVideoBannerElement;
  }
}

declare namespace LocalJSX {
  interface AccordionContainer {}
  interface AccordionDropdown {
    'title'?: string;
  }
  interface CampaignAim {}
  interface CampaignAimContainer {
    'campaignname'?: string;
  }
  interface CampaignNews {
    'newsid'?: string;
  }
  interface CampaignPage {
    'campaignId'?: number;
    'name'?: string;
  }
  interface CampaignTabs {}
  interface ChildComponent {
    'number'?: number;
  }
  interface FlexContainer {
    'alignx'?: string;
    'aligny'?: string;
    'direction'?: string;
    'mobcolumn'?: boolean;
    'wrap'?: boolean;
  }
  interface FullwidthBeigeStrip {}
  interface FullwidthStrip {
    'color'?: string;
    'height'?: string;
  }
  interface GetInvolved {
    'typeform'?: string;
  }
  interface MyComponent {
    /**
    * The first name
    */
    'first'?: string;
    /**
    * The last name
    */
    'last'?: string;
    /**
    * The middle name
    */
    'middle'?: string;
  }
  interface PageContent {}
  interface ParentComponent {
    'number'?: number;
  }
  interface QuickLink {
    'to'?: string;
  }
  interface QuickLinks {
    'title'?: string;
  }
  interface SecondComponent {
    'animal'?: string;
  }
  interface ShowSupport {}
  interface SupportOption {
    'heading'?: string;
    'supportname'?: string;
  }
  interface TabMenu {
    'title'?: string;
  }
  interface TabsContainer {}
  interface VideoBanner {
    'url'?: string;
  }

  interface IntrinsicElements {
    'accordion-container': AccordionContainer;
    'accordion-dropdown': AccordionDropdown;
    'campaign-aim': CampaignAim;
    'campaign-aim-container': CampaignAimContainer;
    'campaign-news': CampaignNews;
    'campaign-page': CampaignPage;
    'campaign-tabs': CampaignTabs;
    'child-component': ChildComponent;
    'flex-container': FlexContainer;
    'fullwidth-beige-strip': FullwidthBeigeStrip;
    'fullwidth-strip': FullwidthStrip;
    'get-involved': GetInvolved;
    'my-component': MyComponent;
    'page-content': PageContent;
    'parent-component': ParentComponent;
    'quick-link': QuickLink;
    'quick-links': QuickLinks;
    'second-component': SecondComponent;
    'show-support': ShowSupport;
    'support-option': SupportOption;
    'tab-menu': TabMenu;
    'tabs-container': TabsContainer;
    'video-banner': VideoBanner;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements {
      'accordion-container': LocalJSX.AccordionContainer & JSXBase.HTMLAttributes<HTMLAccordionContainerElement>;
      'accordion-dropdown': LocalJSX.AccordionDropdown & JSXBase.HTMLAttributes<HTMLAccordionDropdownElement>;
      'campaign-aim': LocalJSX.CampaignAim & JSXBase.HTMLAttributes<HTMLCampaignAimElement>;
      'campaign-aim-container': LocalJSX.CampaignAimContainer & JSXBase.HTMLAttributes<HTMLCampaignAimContainerElement>;
      'campaign-news': LocalJSX.CampaignNews & JSXBase.HTMLAttributes<HTMLCampaignNewsElement>;
      'campaign-page': LocalJSX.CampaignPage & JSXBase.HTMLAttributes<HTMLCampaignPageElement>;
      'campaign-tabs': LocalJSX.CampaignTabs & JSXBase.HTMLAttributes<HTMLCampaignTabsElement>;
      'child-component': LocalJSX.ChildComponent & JSXBase.HTMLAttributes<HTMLChildComponentElement>;
      'flex-container': LocalJSX.FlexContainer & JSXBase.HTMLAttributes<HTMLFlexContainerElement>;
      'fullwidth-beige-strip': LocalJSX.FullwidthBeigeStrip & JSXBase.HTMLAttributes<HTMLFullwidthBeigeStripElement>;
      'fullwidth-strip': LocalJSX.FullwidthStrip & JSXBase.HTMLAttributes<HTMLFullwidthStripElement>;
      'get-involved': LocalJSX.GetInvolved & JSXBase.HTMLAttributes<HTMLGetInvolvedElement>;
      'my-component': LocalJSX.MyComponent & JSXBase.HTMLAttributes<HTMLMyComponentElement>;
      'page-content': LocalJSX.PageContent & JSXBase.HTMLAttributes<HTMLPageContentElement>;
      'parent-component': LocalJSX.ParentComponent & JSXBase.HTMLAttributes<HTMLParentComponentElement>;
      'quick-link': LocalJSX.QuickLink & JSXBase.HTMLAttributes<HTMLQuickLinkElement>;
      'quick-links': LocalJSX.QuickLinks & JSXBase.HTMLAttributes<HTMLQuickLinksElement>;
      'second-component': LocalJSX.SecondComponent & JSXBase.HTMLAttributes<HTMLSecondComponentElement>;
      'show-support': LocalJSX.ShowSupport & JSXBase.HTMLAttributes<HTMLShowSupportElement>;
      'support-option': LocalJSX.SupportOption & JSXBase.HTMLAttributes<HTMLSupportOptionElement>;
      'tab-menu': LocalJSX.TabMenu & JSXBase.HTMLAttributes<HTMLTabMenuElement>;
      'tabs-container': LocalJSX.TabsContainer & JSXBase.HTMLAttributes<HTMLTabsContainerElement>;
      'video-banner': LocalJSX.VideoBanner & JSXBase.HTMLAttributes<HTMLVideoBannerElement>;
    }
  }
}


